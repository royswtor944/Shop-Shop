{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","components/ProductItem/index.js","utils/actions.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","utils/reducers.js","utils/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","err","console","log","error","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","image","name","price","quantity","state","useSelector","dispatch","useDispatch","cart","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","saveOrder","setTimeout","initialState","reducer","action","newState","createStore","__REDUX_DEVTOOLS_EXTENSION__","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.03b87834.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n    \n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(err) {\n      console.log('There was an error');\n      console.error(err);\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // in case of errors, let us know\n      db.onerror = function(err) {\n        console.log('error', err);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n    }\n  });\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    // if there was a match, call update with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n\n      idbPromise('cart', 'put', {\n        ...item, purchaseQuantity: 1\n      });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n","import gql from 'graphql-tag';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from \"../../assets/spinner.gif\"\n\nfunction ProductList() {\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) return state.products;\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from \"react\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  // const [state, dispatch] = useStoreContext();\n  // const { categories } = state;\n  const categories = useSelector(state => state.categories);\n  const dispatch = useDispatch();\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n    // execute our dispatch function with our action object indicating the type of action and the data to set our stat for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nconst CartItem = ({ item }) => {\n  const dispatch = useDispatch();\n\n  const onChange = (e) => {\n    const value = e.target.value;\n\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n      idbPromise('cart', 'put', {\n        ...item,\n        purchaseQuantity: parseInt(value)\n      });\n    }\n  };\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  return (\n    <div className='flex-row'>\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=''\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type='number'\n            placeholder='1'\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role='img'\n            aria-label='trash'\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({\n        type: ADD_MULTIPLE_TO_CART,\n        products: [...cart]\n      });\n    };\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then(res => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  };\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  };\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach(item => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds }\n    });\n  };\n\n  if (!state.cartOpen) {\n    return (\n      <div className='cart-closed' onClick={toggleCart}>\n        <span\n          role='img'\n          aria-label='cart'\n        >\n          🛒\n        </span>\n      </div>\n    )\n  }\n\n  return (\n    <div className='cart'>\n      <div className='close' onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      <div>\n        {state.cart.length ? (\n          <div>\n            {state.cart.map(item => (\n              <CartItem key={item._id} item={item} />\n            ))}\n            <div className='flex-row space-between'>\n              <strong>Total: ${calculateTotal()}</strong>\n              {\n                Auth.loggedIn() ?\n                  <button onClick={submitCheckout}>\n                    Checkout\n                  </button>\n                  :\n                  <span>(log in to check out)</span>\n              }\n            </div>\n          </div>\n        ) : (\n          <h3>\n            <span role='img' aria-label='shocked'>\n              😱\n            </span>\n            You haven't added anything to your cart yet!\n          </h3>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS\n} from '../utils/actions';\n\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif'\n\nimport Cart from '../components/Cart';\n\nfunction Detail() {\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then(indexedProducts => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n\n      idbPromise('cart', 'put', {\n        ...currentProduct,\n        purchaseQuantity: 1\n      });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password }\n      })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, \n        password: formState.password,\n        firstName: formState.firstName, \n        lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n        </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;\n\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n            const cart = await idbPromise('cart', 'get');\n            const products = cart.map(item => item._id);\n\n            if (products.length) {\n                const { data } = await addOrder({ variables: { products }});\n                const productData = data.addOrder.products;\n\n                productData.forEach(item => {\n                    idbPromise('cart', 'delete', item);\n                });\n            }\n        }\n\n        saveOrder();\n    }, [addOrder]);\n\n    setTimeout(() => {\n        window.location.assign('/');\n    }, 3000);\n\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>\n                    Thank you for your purchase!\n                </h2>\n                <h2>\n                    You will now be redirected to the homepage\n                </h2>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Success;\n","// import { useReducer } from 'react';\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from './actions';\n\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: ''\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products]\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      };\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from './reducers';\n\nconst store = createStore(\n    reducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport OrderHistory from \"./pages/OrderHistory\";\nimport Success from './pages/Success';\nimport { Provider } from 'react-redux';\nimport store from './utils/store';\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}